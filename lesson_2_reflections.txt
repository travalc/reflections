What happens when you initialize a repository? Why do you need to do it?

A: When you initialize a repository, you prepare the repository to be able
to receive commits. This is needed in order to begin the history of the
repository.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

A: The staging area is different from the working directory and the repository in
that it is a temporary place between the latter two where files go in preparation
to be committed to the repository. This is valuable as it allows the developer to
visualize the changes that they are committing before they happen.

How can you use the staging area to make sure you have one commit per logical change?

A: You can use the staging area to make sure you have one commit per logical change
by adding only those files to the staging area that are relevant to the logical change
being made.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

A: Some situations when branches would be helpful in keeping my history organized
would be when I need to make multiple language versions or am experimenting with
a certain feature. Branches would help in that I would be able to do these things
while still maintaining a main branch that would represent what I would show off
to others.

How do the diagrams help you visualize the branch structure?

A: The diagrams help me visualize the branch structure by showing where the main
branch starts to divert into separate branches with different changes.

What is the result of merging two branches together? Why do we represent it in the
diagram the way we do?

A: The result of merging two branches together is combining all of the desired changes
from multiple branches into one file. This is represented in the diagram as two
merging paths because it pulls from the history of both branches.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

A: The pros of Git's automatic merging is that it reduces the amount of work needed
to complete regular merges. However, this could result in a lot of conflicts. Merging
manually is more work, but the merges will allow users to resolve conflicts.
