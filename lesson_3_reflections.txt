When would you want to use a remote repository rather than keeping all your work local?

A: You would want to use a remote repository rather than keeping all your work local
if you are contributing to a project that isn't yours.

Why might you want to always pull changes manually rather than having Git automatically
stay up-to-date with your remote repository?

A: You would want to always pull changes manually rather than having Git automatically
stay up to date with your remote repository because changes made on the remote repository
may not be wanted or needed on the project.

Describe the differences between forks, clones, and branches. When would you use one
instead of another?

A: Forks are copies of repositories that are made on github servers, and are used when
wanting to copy someone else's repository onto your github profile while still giving
credit to the originator. Clones are copies of a repository that are copied either locally
or from the remote on github to the local computer. Branches represent a lineage of commits
or a version of a repository.

What is the benefit of having a copy of the last known state of the remote stored locally?

A: The benefit of having a copy of the last known state of the remote stored locally
is that you can work offline and track the changes to the remote, and when pulling or
fetching commits from github, you can track if there are conflicting commits that descend
from a common parent, then correct those conflicts and merge the commits together.

How would you collaborate without using Git or GitHub? What would be easier, and what would
be harder?

A: You could collaborate without using Git or Github by sending zip files back and forth
between collaborators and sharing proposed changes in a readme. Nothing about this would
be easier, and it would be harder in that collaborators would need to open individual
files and manually insert the changes in order to merge versions. It would also be difficult
to track the history of the versions and to investigate bugs and fix them.

When would you want to make changes in a separate branch rather than directly in master?
What benefits does each approach have?

A: You would want to make changes in a separate branch rather than directly in master
when you are proposing changes to a repository that you are are not the main contributor
to. The benefit of this is that you can keep up to date with the changes that the
other contributors are making by pulling the changes of the remote master into the
local master then merging the local  master into the separate branch you're working on
to see if there are any conflicts. The benefit of working directly in the master is
that this process is much more simple, but can only be done if you're the main
contributor.
